nodejs被诋毁的部分原因：
1.单线程带来的硬件资源利用不足与异常导致整个应用退出而带来对于稳定性和健壮性的质疑
	备注：HTML5规范提倡的web worker可以帮助我们很好处理该问题，nodejs借鉴其提供了child_process模块以便于进程复制以及进程间通信机制
2.异步I/O不符合传统线性思维以及函数嵌套带来的噩梦
3.异常的捕获问题（try{}catch(){}机制无效）

偏函数：（jquery中的应用）
e.g:
	var isType = function(type){
		return function(data){
			return Object.prototype.toString.call(data) == '[object '+ type +']';
		};
	}
	var isArray = isType('Array');
	isArray(['derick']);
e.g:
	var after = function(times,cb){
		if(times <= 0){return cb();}
		return function(){
			if(--times < 1){
				return cb.apply(this,arguments);
			}
		}
	};

异步编程解决方案：
1.sub/pub(事件发布/订阅模式)
2.promise/deferred模式（promise用于事件注册作用于外部，deferred用于择机触发事件和状态变化作用于内部）
3.流程控制库

/*
	@ sub/pub模式(nodejs原生提供模块)
*/
	var events = require('events').EventEmitter,
		eventIns = new events();
	eventIns.on('eventName',cb);
	eventIns.emit('eventName',data);
	
	e.g.业务场景：雪崩问题
	
	var proxy = new events.EventEmitter(),
		status = 'ready';
	var select = function(cb){
		proxy.once('selected',cb);
		if(status == 'ready'){
			status = 'pending';
			db.select('sql',function(data){
				proxy.emit('selected',data);
				status = 'ready';
			});
		}
	};
	
	e.g.参考github中connect_pool.js
	




