
Node三大特点密不可分：

	Node保持了javascript在浏览器中单线程的特点，这样避免了多线程状态同步，上线文切换以及内存分配等问题，但这
	同时也注定了其自身其他特点出现的必然性。首先就是异步io，作为服务端平台，需要不间断接受新的请求并予以响应，
	nodejs也只有通过异步io才能保证整个应用不会因为io的阻塞导致执行的“停顿”（当然这里暂时先不讨论计算密集型应用
	的问题）。然而异步io如何实现，结合浏览器端javascript的运用我们发现事件和回调函数的结合是最佳的实现方式，事件
	可以让程序员只需要关注固定的事件节点并且可以很好的解耦代码，多异步协作的场景下也可以通过事件的相互配合来实现，
	（当然多异步协作问题也有其他的解决方案比如Pub/Sub,Promise/Deferred等）,而对于回调函数前端工程师再熟悉不过了，
	浏览器中通过ajax发起的异步请求就是通过回调的方式来接受服务端返回数据。
	
	
单线程带来的问题：
	
	1.浏览器端javascript和UI共用一个线程，所以javascript的执行将会导致UI渲染的暂停。而作为服务端的nodejs,长时间
	的cpu占用将会导致后续的异步io发不出调用，系统底层已经完成的异步io对应回调也得不到执行。html5提出了web workers
	规范给了我们很好的解决方案，通过它我们可以创建工作线程来将计算密集型的工作交给工作线程进行处理以避免javascript的
	执行导致UI渲染阻塞的问题。而对于nodejs也借鉴了该规范来解决单线程大量计算的问题：child_process，通过创建子进程
	我们可以实现master-worker的主从工作模式，进程之间通过事件的方式进行通信以传递数据。

